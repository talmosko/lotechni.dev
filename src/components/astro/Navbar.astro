---
import OutlinedText from './OutlinedText.astro'
import { cn } from '@utils/cn'
import Icon from './Icon.astro'

interface Props {
  className?: string
}

const { className } = Astro.props

// current path for active link highlight
const currentPath = Astro.url.pathname.replace(/\/$/, '')

const navLinks = [
  {
    href: '/our-story',
    label: 'מי אנחנו',
  },
  {
    href: '/episodes',
    label: 'הפרקים שלנו',
  },
  {
    href: '/meetups',
    label: 'מיטאפים',
  },
  {
    href: '/gallery',
    label: 'גלריה',
  },
  {
    href: '/community',
    label: 'הקהילה',
  },
]
---

<header
  id="navbar"
  class={cn('sticky top-0 z-50 w-full bg-surface transition-transform duration-300', className)}>
  <nav class="container mx-auto px-4 py-2" aria-label="Main navigation">
    <div class="flex h-16 items-center justify-between">
      <!-- Desktop Navigation -->
      <div class="hidden md:flex md:items-center md:gap-6">
        {
          navLinks.map(({ href, label }) => {
            const isActive = currentPath === href
            return (
              <a
                href={href}
                class={cn(
                  'text-white/80 transition-colors hover:text-white',
                  isActive && 'font-bold text-white'
                )}
                aria-current={isActive ? 'page' : undefined}>
                {label}
              </a>
            )
          })
        }
      </div>

      <!-- Mobile Menu - button -->
      <button
        id="mobile-menu-button"
        class="flex items-center md:hidden"
        aria-label="Toggle menu"
        aria-expanded="false">
        <Icon icon="mobileMenuOpen" size="lg" data-menu-icon="open" />
        <Icon icon="mobileMenuClose" size="lg" data-menu-icon="close" className="hidden" />
      </button>

      <!-- Logo  -->
      <a href="/" class="flex items-center">
        <div>
          <div class="flex items-center gap-1.5">
            <OutlinedText className="text-xs md:text-sm">&lt;</OutlinedText>
            <OutlinedText className="text-base md:text-lg lg:text-xl" underline>לא</OutlinedText>
            <OutlinedText className="text-lg md:text-xl lg:text-2xl">טכני</OutlinedText>
          </div>

          <div class="flex items-center gap-1.5 ps-4">
            <OutlinedText className="text-base md:text-lg lg:text-xl" underline>ולא</OutlinedText>
            <OutlinedText className="text-lg md:text-xl lg:text-2xl">במקרה </OutlinedText>
            <OutlinedText className="text-xs md:text-sm">\&gt;</OutlinedText>
          </div>
        </div>
      </a>
    </div>

    <!-- Mobile Menu - overlay -->
    <div
      id="mobile-menu"
      class="fixed inset-y-0 right-0 top-16 z-50 flex h-[calc(100vh-4rem)] w-full translate-x-full transform bg-surface transition-transform duration-300 ease-in-out md:hidden"
      aria-hidden="true">
      <div class="flex h-full w-full flex-col items-center justify-center space-y-8 p-4">
        {
          navLinks.map(({ href, label }) => {
            const isActive = currentPath === href
            return (
              <a
                href={href}
                class={cn(
                  'text-xl text-white/80 transition-colors hover:text-white',
                  isActive && 'font-bold text-white'
                )}
                aria-current={isActive ? 'page' : undefined}>
                {label}
              </a>
            )
          })
        }
      </div>
    </div>
  </nav>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button')
  const mobileMenu = document.getElementById('mobile-menu')
  const menuOpenIcon = document.querySelector('[data-menu-icon="open"]')
  const menuCloseIcon = document.querySelector('[data-menu-icon="close"]')
  let isMenuOpen = false

  if (mobileMenuButton && mobileMenu && menuOpenIcon && menuCloseIcon) {
    mobileMenuButton.addEventListener('click', () => {
      isMenuOpen = !isMenuOpen
      mobileMenu.classList.toggle('translate-x-full')
      mobileMenu.setAttribute('aria-hidden', (!isMenuOpen).toString())
      mobileMenuButton.setAttribute('aria-expanded', isMenuOpen.toString())
      document.body.style.overflow = isMenuOpen ? 'hidden' : ''

      // Toggle icons
      menuOpenIcon.classList.toggle('hidden')
      menuCloseIcon.classList.toggle('hidden')
    })

    // close menu when click outside
    document.addEventListener('click', (event) => {
      if (
        isMenuOpen &&
        mobileMenu &&
        !mobileMenu.contains(event.target as Node) &&
        !mobileMenuButton?.contains(event.target as Node)
      ) {
        isMenuOpen = false
        mobileMenu.classList.add('translate-x-full')
        mobileMenu.setAttribute('aria-hidden', 'true')
        mobileMenuButton.setAttribute('aria-expanded', 'false')
        document.body.style.overflow = ''

        // Reset icons
        menuOpenIcon.classList.remove('hidden')
        menuCloseIcon.classList.add('hidden')
      }
    })
  }

  // scroll behavior - hide/show navbar on scroll
  let lastScroll = 0
  const navbar = document.getElementById('navbar')
  const scrollThreshold = 100 // Minimum scroll before navbar hides

  function handleScroll() {
    if (!navbar) return

    const currentScroll = window.scrollY

    // Don't hide navbar when near the top of the page
    if (currentScroll <= scrollThreshold) {
      navbar.style.transform = 'translateY(0)'
      return
    }

    // Scrolling down and not at bottom
    if (currentScroll > lastScroll && !isMenuOpen) {
      navbar.style.transform = 'translateY(-100%)'
    }
    // Scrolling up
    else {
      navbar.style.transform = 'translateY(0)'
    }

    lastScroll = currentScroll
  }

  // Add a small delay to avoid too frequent updates
  let scrollTimeout: number
  window.addEventListener('scroll', () => {
    if (scrollTimeout) {
      window.cancelAnimationFrame(scrollTimeout)
    }
    scrollTimeout = window.requestAnimationFrame(handleScroll)
  })
</script>
